generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String    @id @default(cuid())
  firstName             String?
  lastName              String?
  username              String?   @unique
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  profilePictureUrl     String?
  passwordHash          String?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  login                 String?
  role                  UserRole  @default(user)
  isAdmin               Boolean   @default(false)
  accounts              Account[]
  sessions              Session[]
  costumes              Costume[]
}

model Costume {
  id          String        @id @default(cuid())
  sellerId    String
  title       String
  description String
  price       Decimal       @db.Decimal(10, 2)
  size        String
  condition   CostumeCondition
  status      CostumeStatus @default(available)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  seller      User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  images      CostumeImage[]
  categories  CostumeToCategory[]
}

model CostumeCategory {
  id        String              @id @default(cuid())
  name      String              @unique
  costumes  CostumeToCategory[]
}

model CostumeToCategory {
  costumeId  String
  categoryId String
  costume    Costume         @relation(fields: [costumeId], references: [id], onDelete: Cascade)
  category   CostumeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([costumeId, categoryId])
}

model CostumeImage {
  id         String  @id @default(cuid())
  costumeId  String
  imageUrl   String
  isPrimary  Boolean @default(false)
  costume    Costume @relation(fields: [costumeId], references: [id], onDelete: Cascade)

  @@index([costumeId])
}

enum CostumeCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
}

enum CostumeStatus {
  available
  sold
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  user
  admin
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
