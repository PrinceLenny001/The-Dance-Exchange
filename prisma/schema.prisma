generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?   // NextAuth required field
  firstName             String?
  lastName              String?
  username              String?   @unique
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  profilePictureUrl     String?
  passwordHash          String?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  stripeAccountId       String?   // Stripe Connect account ID
  stripeAccountStatus   String?   // pending, active, restricted, etc.
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  login                 String?
  role                  UserRole  @default(user)
  isAdmin               Boolean   @default(false)
  accounts              Account[]
  sessions              Session[]
  costumes              Costume[]
  reviewsGiven          Review[] @relation("Reviewer")
  reviewsReceived       Review[] @relation("Reviewee")
  orders                Order[]  @relation("Buyer")
}

model Costume {
  id               String        @id @default(cuid())
  sellerId         String
  title            String
  description      String
  price            Decimal       @db.Decimal(10, 2)
  size             String
  condition        CostumeCondition
  status           CostumeStatus @default(available)
  shippingCost     Decimal?      @db.Decimal(10, 2)
  shippingMethod   String?
  estimatedDelivery String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  seller           User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  images           CostumeImage[]
  categories       CostumeToCategory[]
  orderItems       OrderItem[]
}

model CostumeCategory {
  id        String              @id @default(cuid())
  name      String              @unique
  costumes  CostumeToCategory[]
}

model CostumeToCategory {
  costumeId  String
  categoryId String
  costume    Costume         @relation(fields: [costumeId], references: [id], onDelete: Cascade)
  category   CostumeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([costumeId, categoryId])
}

model CostumeImage {
  id         String  @id @default(cuid())
  costumeId  String
  imageUrl   String
  isPrimary  Boolean @default(false)
  costume    Costume @relation(fields: [costumeId], references: [id], onDelete: Cascade)

  @@index([costumeId])
}

enum CostumeCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
}

enum CostumeStatus {
  available
  sold
}

model Review {
  id          String   @id @default(cuid())
  orderId     String?  // Optional for now, will be used when orders are implemented
  reviewerId  String
  revieweeId  String
  rating      Int      // 1-5 stars
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviewer    User     @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee    User     @relation("Reviewee", fields: [revieweeId], references: [id], onDelete: Cascade)
  order       Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([revieweeId])
  @@index([reviewerId])
  @@index([orderId])
}

model Order {
  id              String      @id @default(cuid())
  buyerId         String
  totalPrice      Decimal     @db.Decimal(10, 2)
  status          OrderStatus @default(processing)
  shippingAddress Json        // Store as JSON for flexibility
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  buyer           User        @relation("Buyer", fields: [buyerId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
  reviews         Review[]

  @@index([buyerId])
  @@index([status])
}

model OrderItem {
  id              String  @id @default(cuid())
  orderId         String
  costumeId       String
  priceAtPurchase Decimal @db.Decimal(10, 2)
  quantity        Int     @default(1)
  order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  costume         Costume @relation(fields: [costumeId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([costumeId])
}

enum OrderStatus {
  processing
  shipped
  delivered
  cancelled
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  user
  admin
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
